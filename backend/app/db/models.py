from sqlalchemy import Column, String, Float, Integer, DateTime, SmallInteger,LargeBinary, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from geoalchemy2 import Geometry
from db.database import Base
from sqlalchemy.sql import func

class DigitalPermitPolygon(Base):
    __tablename__ = 'digital_permit_polygon'

    objectid = Column('objectid', Integer, primary_key=True, index=True, autoincrement=True)
    globalid = Column('globalid', String(38), unique=True, index=True, nullable=False)
    formid = Column('formid', String(38), nullable=True)
    templateid = Column('templateid', String(38), nullable=True)
    projectid = Column('projectid', String(38), nullable=True)
    approval_status = Column('approval_status', SmallInteger, nullable=True)
    start_datetime = Column('start_datetime', DateTime(timezone=True), nullable=True)
    end_datetime = Column('end_datetime', DateTime(timezone=True), nullable=True)
    created_at = Column('created_at', DateTime(timezone=True), server_default=func.now())
    created_by = Column('created_by', String(255), nullable=True)
    updated_at = Column('updated_at', DateTime(timezone=True), onupdate=func.now(), nullable=True)
    updated_by = Column('updated_by', String(255), nullable=True)
    gdb_geomattr_data = Column('gdb_geomattr_data', LargeBinary, nullable=True) # autogenerated at arcgis(maybe)
    shape = Column('shape', Geometry(geometry_type='POLYGONM', srid=3857), nullable=True)

class DigitalPermitPoint(Base):
    __tablename__ = 'digital_permit_point'

    objectid = Column('objectid', Integer, primary_key=True, index=True, autoincrement=True)
    globalid = Column('globalid', String(38), unique=True, index=True, nullable=False)
    projectid = Column('projectid', String(38), nullable=True)
    templateid = Column('templateid', String(38), nullable=True)
    formid = Column('formid', String(38), nullable=True)
    approval_status = Column('approval_status', SmallInteger, nullable=True)
    start_datetime = Column('start_datetime', DateTime(timezone=True), nullable=True)
    end_datetime = Column('end_datetime', DateTime(timezone=True), nullable=True)
    created_at = Column('created_at', DateTime(timezone=True), server_default=func.now())
    created_by = Column('created_by', String(255), nullable=True)
    updated_at = Column('updated_at', DateTime(timezone=True), onupdate=func.now(), nullable=True)
    updated_by = Column('updated_by', String(255), nullable=True)
    gdb_geomattr_data = Column('gdb_geomattr_data', LargeBinary, nullable=True)
    shape = Column('shape', Geometry(geometry_type='POINTM', srid=3857), nullable=True)

class DigitalPermitAnnotation(Base):
    __tablename__ = 'digital_permit_annotation'

    objectid = Column('objectid', Integer, primary_key=True, index=True, autoincrement=True)
    globalid = Column('globalid', String(38), unique=True, index=True, nullable=False)
    formid = Column('formid', String(38), nullable=True)
    templateid = Column('templateid', String(38), nullable=True)
    projectid = Column('projectid', String(38), nullable=True)
    annotation = Column('annotation', String(255), nullable=True)
    approval_status = Column('approval_status', SmallInteger, nullable=True)
    start_datetime = Column('start_datetime', DateTime(timezone=True), nullable=True)
    end_datetime = Column('end_datetime', DateTime(timezone=True), nullable=True)
    created_at = Column('created_at', DateTime(timezone=True), server_default=func.now())
    created_by = Column('created_by', String(255), nullable=True)
    updated_at = Column('updated_at', DateTime(timezone=True), onupdate=func.now(), nullable=True)
    updated_by = Column('updated_by', String(255), nullable=True)
    gdb_geomattr_data = Column('gdb_geomattr_data', LargeBinary, nullable=True)
    shape = Column('shape', Geometry(geometry_type='POINTM', srid=3857), nullable=True)

class File(Base):
    __tablename__ = 'digital_permit_files'

    objectid = Column(Integer, primary_key=True, index=True, autoincrement=True)
    filename = Column(String(255), nullable=False)  # Name of the file
    file_path = Column(String(255), nullable=False)  # Path where the file is stored
    mime_type = Column(String(100), nullable=False)  # MIME type of the file (e.g., image/png)
    size = Column(Integer, nullable=False)  # Size of the file in bytes
    created_at = Column(DateTime(timezone=True), server_default=func.now())  # Timestamp of file creation
    updated_at = Column(DateTime(timezone=True), onupdate=func.now(), nullable=True)  # Timestamp of file update

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    first_name = Column(String(255), index=True, nullable=False)
    last_name = Column(String(255), index=True, nullable=True)
    email = Column(String(255), unique=True, index=True, nullable=False)
    password = Column(String(255), nullable=False)
    is_active = Column(Boolean, default=True)
    role = Column(String(255), default='user', nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), nullable=False)
    last_login = Column(DateTime(timezone=True), nullable=True)
    last_login_attempt = Column(DateTime(timezone=True), nullable=True)

    # Relationship to Provider (One User can have multiple Providers)
    providers = relationship("Provider", back_populates="user", cascade="all, delete")

class Provider(Base):
    __tablename__ = 'providers'

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    provider = Column(String(255), index=True, nullable=True)
    provider_id = Column(String(255), unique=True, index=True, nullable=False)
    user_id = Column(Integer, ForeignKey('users.id', ondelete="CASCADE"), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), nullable=False)

    user = relationship("User", back_populates="providers")